<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>区块链溯源系统环境部署</title>
    <link href="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>以下教程是在win10上完成的。</p><h1 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h1><p>nodejs安装：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>   这是用来运行前端的</p><p>win键+r键 ，输入cmd,看一下npm版本，有版本就代表成功了。</p><figure class="highlight cmd"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\2407288830&gt;<span class="hljs-title">npm</span> -<span class="hljs-title">version</span></span><br><span class="hljs-function">6.13.4  </span><br></code></pre></td></tr></table></figure><p>idea安装和破解：<a href="https://www.mubucm.com/doc/rTDUIGvfnk">https://www.mubucm.com/doc/rTDUIGvfnk</a>   用来运行后端</p><p>java jdk要求：建议1.8版本      一定要是64位的，不然使用链区块sdk的时候会报错</p><p>finalshell安装：<a href="http://www.hostbuf.com/t/988.html">http://www.hostbuf.com/t/988.html</a>   相当于xshell，用来连接服务器的。</p><h1 id="Hyperledger-Fabric1-4-0-环境配置"><a href="#Hyperledger-Fabric1-4-0-环境配置" class="headerlink" title="Hyperledger Fabric1.4.0 环境配置"></a>Hyperledger Fabric1.4.0 环境配置</h1><p>部署最简单的Hyperleger fabric，首先需要买个服务器:<a href="https://www.aliyun.com/minisite/goods?userCode=svaj1q3t&amp;share_source=copy_link">https://www.aliyun.com/minisite/goods?userCode=svaj1q3t&amp;share_source=copy_link</a></p><p>有钱买配置好一点，2核4G，没钱买1核2G，当然带宽是越大越好，5M最好，1M也可以用，就是有点慢，Centos和Ubuntu系统都行，我这个教程用的是Centos系统。如果你使用虚拟机也是完全ok的，但是操作可能会有一点点小的事故，比如连不上网，可能需要百度一下自己解决一下。</p><h2 id="开放服务器的端口"><a href="#开放服务器的端口" class="headerlink" title="开放服务器的端口"></a>开放服务器的端口</h2><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211213152539454.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211213152559581.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211213152631550.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211213152650088.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211213152706298.png"></p><h2 id="使用finalShell连接服务器"><a href="#使用finalShell连接服务器" class="headerlink" title="使用finalShell连接服务器"></a>使用finalShell连接服务器</h2><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211214141123682.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211214141744104.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211214141920066.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211214142651435.png"></p><h2 id="Fabric-v1-4-0安装部署-全程复制粘贴就ok"><a href="#Fabric-v1-4-0安装部署-全程复制粘贴就ok" class="headerlink" title="Fabric v1.4.0安装部署  全程复制粘贴就ok"></a>Fabric v1.4.0安装部署  全程复制粘贴就ok</h2><h3 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h3><table><thead><tr><th>编号</th><th>工具</th><th>版本号</th></tr></thead><tbody><tr><td>1</td><td><a href="https://curl.haxx.se/download.html">cURL</a></td><td>最新版（7.63.0）</td></tr><tr><td>2</td><td><a href="https://www.docker.com/get-started">Docker</a></td><td>17.06.2-ce及其以上版本</td></tr><tr><td>3</td><td><a href="https://docs.docker.com/compose/overview/">Docker Compose</a></td><td>1.14.0及其以上版本</td></tr><tr><td>4</td><td><a href="https://golang.org/dl/">Go</a></td><td>1.11.x</td></tr></tbody></table><ol><li><p><strong>cURL最新版安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载最新版的cURL并将其解压到指定目录（此处以/opt目录为例）</span><br><span class="hljs-built_in">cd</span> /<br>mkdir resource<br><span class="hljs-built_in">cd</span> /resource<br>wget https://curl.haxx.se/download/curl-7.63.0.tar.gz<br>sudo tar xzvf curl-7.63.0.tar.gz -C /opt<br><br><span class="hljs-comment"># 编译并安装cURL</span><br><span class="hljs-built_in">cd</span> /opt/curl-7.63.0<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>通过运行<code>curl --version</code>查看是否安装成功，若结果如下图所示，则表示安装成功。</p><p><strong>若出现下图所示错误，则需进行如下操作,没出现错误则不需要以下操作。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在/etc/ld.so.conf加入/usr/local/lib这一行内容</span><br>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/usr/local/lib&quot;</span> &gt;&gt; /etc/ld.so.conf<br><br><span class="hljs-comment"># 执行下列命令使加入的内容生效</span><br>sudo /sbin/ldconfig -v<br></code></pre></td></tr></table></figure></li><li><p><strong>Docker和Docker Compose安装</strong></p><ul><li><p>Docker(参考<a href="https://docs.docker.com/engine/install/centos/">Get Docker CE for Ubuntu</a>) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y yum-utils<br><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br>   <br>sudo yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-comment">#启动docker</span><br>sudo systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>Docker Compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载Docker Compose二进制文件,这一步可能出现下载不了的情况，会一直等待建立连接，ctrl+C终止掉，多试几次就好了</span><br><br>sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><br>sudo chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><span class="hljs-comment">#可以查看是否安装成功</span><br>docker-compose -version<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>Go安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载go1.11.linux-amd64.tar.gz并将其解压到指定目录（此处为/usr/local）</span><br> <span class="hljs-built_in">cd</span> /resource/<br>wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz<br>tar xzvf go1.11.linux-amd64.tar.gz -C /usr/<span class="hljs-built_in">local</span><br>touch goenvset.sh<br>vim goenvset.sh<br><span class="hljs-comment">#按i插入以下内容，ESC键退出，shift键+:键输入wq 回车退出</span><br>goenvset.sh文件内容如下所示：<br><br>cat &gt;&gt; /etc/profile &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">export GOROOT=/usr/local/go</span><br><span class="hljs-string">export GOARCH=amd64</span><br><span class="hljs-string">export GOOS=linux</span><br><span class="hljs-string">export GOPATH=/home/ubuntu/gopath</span><br><span class="hljs-string">export GOBIN=$GOPATH/bin</span><br><span class="hljs-string">export PATH=$GOPATH/bin:$GOROOT/bin:$PATH</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 执行已有的goenvset.sh向/etc/profile中写入相应的环境变量</span><br>sudo chmod 705 goenvset.sh      <span class="hljs-comment"># 更改goenvset.sh的权限使其可执行</span><br>sudo ./goenvset.sh<span class="hljs-comment"># 执行goenvset.sh脚本</span><br><br><span class="hljs-comment"># 使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ol><h3 id="二、Fabric安装"><a href="#二、Fabric安装" class="headerlink" title="二、Fabric安装"></a>二、Fabric安装</h3><ol><li><p>将fabric-samples下载到<code>$GOPATH/src/github.com/hyperledger</code>目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-comment"># 克隆fabric-samples项目并切换到v1.4tag</span><br>yum -y install git<br><span class="hljs-comment">#这一步容易卡在一直处于建立连接中，ctrl+c断掉，重新再来</span><br>git <span class="hljs-built_in">clone</span> https://github.com/hyperledger/fabric-samples.git<br><span class="hljs-built_in">cd</span> fabric-samples<br>git checkout -b sample v1.4.0<br></code></pre></td></tr></table></figure></li><li><p>安装Fabric Binaries和Fabric相关的Docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/scripts<br>vim bootstrap.sh <br><br><span class="hljs-comment">#用#注释掉binaryDownload()函数</span><br></code></pre></td></tr></table></figure><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211214151145232.png"></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">安装Fabric、Fabric-<span class="hljs-keyword">ca</span>以及第三方Docker镜像（./<span class="hljs-keyword">bootstrap</span>.<span class="hljs-keyword">sh</span> &lt;fabric&gt; &lt;fabric-<span class="hljs-keyword">ca</span>&gt; &lt;thirdparty&gt;）<br>./<span class="hljs-keyword">bootstrap</span>.<span class="hljs-keyword">sh</span> 1.4.0 1.4.0 0.4.14<br></code></pre></td></tr></table></figure><p>值得注意的是，如果由于网络问题，此处通过<code>bootstrap.sh</code>脚本安装可能会出错，此时可进行手动安装。安装步骤如下：</p><ul><li><p>将指定版本的Hyperledger Fabric特定于平台的二进制文件和配置文件安装到fabric-samples的bin和config目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /resource/<br>wget https://github.com/hyperledger/fabric/releases/download/v1.4.0/hyperledger-fabric-linux-amd64-1.4.0.tar.gz<br><br><br>wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.0/hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz<br><br>tar xzvf hyperledger-fabric-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br>tar xzvf hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br><br><span class="hljs-comment">#向/etc/profile中写入环境变量</span><br>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$GOPATH/src/github.com/hyperledger/fabric-samples/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile<br><br><span class="hljs-comment">#使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="bootstrap-sh脚本成功下载文件，以下不需要操作-不需要操作"><a href="#bootstrap-sh脚本成功下载文件，以下不需要操作-不需要操作" class="headerlink" title="bootstrap.sh脚本成功下载文件，以下不需要操作,不需要操作"></a>bootstrap.sh脚本成功下载文件，以下不需要操作,不需要操作</h3></li><li><p>下载相关Docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载Fabric相关镜像（fabric-peer、fabric-orderer、fabric-ccenv、fabric-tools），此处以fabric-peer镜像为例，其他镜像同理</span><br>docker pull hyperledger/fabric-peer:1.4.0<br>docker tag hyperledger/fabric-peer:1.4.0 hyperledger/fabric-peer:latest<br><br><span class="hljs-comment"># 下载Fabric第三方镜像（fabric-couchdb、fabric-kafka、fabric-zookeeper），此处以fabric-couchdb为例，其他镜像同理</span><br>docker pull hyperledger/fabric-couchdb:0.4.14<br>docker tag hyperledger/fabric-couchdb:0.4.14 hyperledger/fabric-couchdb:latest<br><br><span class="hljs-comment"># 下载Fabric CA镜像</span><br>docker pull hyperledger/fabric-ca:1.4.0<br>docker tag hyperledger/fabric-ca:1.4.0 hyperledger/fabric-ca:latest<br></code></pre></td></tr></table></figure></li><li><p>（可选）镜像的备份与恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将上述Docker镜像存储到fabric-images文件中</span><br>docker save $(docker images | grep fabric | grep latest | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>) -o fabric-images<br><span class="hljs-comment"># 若需要多机部署，则通过下列命令将其分发到其他机器</span><br>scp fabric-images ubuntu@192.168.70.21:~<br><span class="hljs-comment"># 在192.168.70.21上加载上述镜像</span><br>docker load -o fabric-images<br></code></pre></td></tr></table></figure></li></ul><h3 id="通过运行Build-your-first-network样例来进行测试"><a href="#通过运行Build-your-first-network样例来进行测试" class="headerlink" title="通过运行Build your first network样例来进行测试"></a>通过运行<code>Build your first network</code>样例来进行测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/first-network<br><span class="hljs-comment"># 编译通过Golang开发的chaincode并启动相关的容器</span><br>启动（过程比较长，可能需要几分钟）<br>./byfn.sh up   <br><br><br><span class="hljs-comment">#停止first-network网络中所有的容器，删除crypto材料和4个artifacts（genesis.block、mychannel.block、Org1MSPanchor.tx、Org2MSPanchor.tx）以及chaincode镜像</span><br>./byfn.sh down   <span class="hljs-comment">#请不要随便使用该命令</span><br></code></pre></td></tr></table></figure></li></ol><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215145958700.png"> </p><p>到这里就算运行成功。</p><h1 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h1><p>sdkdemo是fabric sdk,运行sdkdemo就可以了。</p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215153244642.png"> </p><h2 id="运行后端项目"><a href="#运行后端项目" class="headerlink" title="运行后端项目"></a>运行后端项目</h2><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215153505822.png"></p><h2 id="运行前端项目"><a href="#运行前端项目" class="headerlink" title="运行前端项目"></a>运行前端项目</h2><p>在目录oldlot中输入cmd回车</p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215153559581.png"></p><p>输入npm run dev 回车</p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215153705078.png"> </p><p>注意：如果发现没有node_modules目录，需要先执行一下npm install</p><h2 id="运行区块链sdk"><a href="#运行区块链sdk" class="headerlink" title="运行区块链sdk"></a>运行区块链sdk</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h6 id="域名映射"><a href="#域名映射" class="headerlink" title="域名映射"></a>域名映射</h6><p>编辑<code>C:\Windows\System32\drivers\etc\host</code><br>在最后一行添加下面内容,192.168.xx.xx是你自己服务器(虚拟机)的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">192.168.xx.xxpeer0.org1.example.com peer1.org1.example.com peer0.org2.example.com peer1.org2.example.com orderer.example.com<br></code></pre></td></tr></table></figure><h6 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">更改世界状态数据库是couchdb启动</span><br><span class="hljs-meta">#</span><span class="bash">访问方式：ip:5984/_utils</span><br>cd /home/ubuntu/gopath/src/github.com/hyperledger/fabric-samples/first-network<br>./byfn.sh up -s couchdb<br><span class="hljs-meta">#</span><span class="bash">启动2个org，4个peer，1个cli，4个couchdb,1个kafka</span><br>docker-compose -f docker-compose-cli.yaml -f docker-compose-couch.yaml -f docker-compose-kafka.yaml start<br></code></pre></td></tr></table></figure><h6 id="生成tx文件"><a href="#生成tx文件" class="headerlink" title="生成tx文件"></a>生成tx文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/ubuntu/gopath/src/github.com/hyperledger/fabric-samples/first-network<br>../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx channel-artifacts/test.tx -channelID test<br></code></pre></td></tr></table></figure><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215171522972.png"></p><blockquote><p>将<code>/opt/gopath/src/github.com/hyperledger/fabric/scripts/fabric-samples/first-network</code>目录下的<code>crypto-config</code>文件拷贝到工程的<code>resources</code>目录下<br>注意：其中在<code>1.4.6</code>版本<code>peerOrganization-org1(2)-users-Admin-msp-admincerts</code>目录下的文件没有，但是可以拷贝同个目录下的<code>signcerts</code>的文件</p></blockquote><p>将生成的<code>test.tx</code>文件拷贝到<code>idea</code>工程的<code>resources</code>目录下    </p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215171631083.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215171838437.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215171950996.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215171914106.png"></p><p>IDEA乱码配置，之前的项目这样配置的，你可以按照这样配置下，不然可能乱码</p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215162603128.png">　</p><p>idea打开sdkdemo</p><p><strong>注意:java 的jdk一定要是64位</strong></p><p>路径是双斜杠\\</p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215162915220.png"></p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215163124434.png"> </p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215164437760.png"></p><p>运行sdkdemo项目</p><p>在浏览器中调用sdkdemo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#在浏览器中依次访问下面的网址，不要重复执行<br>#创建通道<br><span class="hljs-function">http://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">createChannel</span></span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">createChannel2</span></span><br><span class="hljs-function">#安装智能合约</span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">chainCodeInstall</span></span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">chainCodeInstall2</span></span><br><span class="hljs-function">#实例化智能合约,比较慢</span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">init</span></span><br></code></pre></td></tr></table></figure><p>三种用户，可以去表里面找对应的账户和密码</p><p><img src="%E9%83%A8%E7%BD%B2%E6%96%87%E6%A1%A3.assets/image-20211215175716453.png"> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM 数论部分</title>
    <link href="/2022/03/06/ACM_%E6%95%B0%E8%AE%BA/"/>
    <url>/2022/03/06/ACM_%E6%95%B0%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>ACM/ICPC中的数学</p><h2 id="一些数论基本定理"><a href="#一些数论基本定理" class="headerlink" title="一些数论基本定理"></a>一些数论基本定理</h2><p>( a + b ) mod c = ((a mod c) + (b mod c)) mod c<br>( a * b ) mod c = ((a mod c) * (b mod c)) mod c  </p><p>消去律：若 gcd(c,p) = 1,则(gcd表示同余数)<br>ac ≡ bc mod p =&gt; a ≡ b mod p</p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>算法一</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//快速求a^b ，复杂度 log(b) </span><br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//b是奇数</span><br>        <span class="hljs-keyword">return</span> a * <span class="hljs-built_in">Pow</span>(a,b<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">Pow</span>(a,b/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> t * t;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>算法二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//快速求a^b ，复杂度 log(b) </span><br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> base = a;<br>    <span class="hljs-keyword">while</span>(b) &#123;<br>        <span class="hljs-keyword">if</span>( b &amp; <span class="hljs-number">1</span>) <br>            result *= base;<br>        base *= base;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速幂取模"><a href="#快速幂取模" class="headerlink" title="快速幂取模"></a>快速幂取模</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PowMod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">//快速求 a^b % c ，要避免计算中间结果溢出</span><br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> base = a%c;<br>    <span class="hljs-keyword">while</span>(b) &#123;<br>        <span class="hljs-keyword">if</span>( b &amp; <span class="hljs-number">1</span>) <br>            result = (result * base)%c;<br>        base = (base * base) % c;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="等比数列二分求和取模"><a href="#等比数列二分求和取模" class="headerlink" title="等比数列二分求和取模"></a>等比数列二分求和取模</h3><p>Sn= a+a2+…+an<br>要求 Sn mod p<br>如果用公式算，可能溢出，因此用二分法求  </p><ol><li>若 n 是偶数<br>Sn= a+…+an/2 + an/2+1 + an/2+2 +…+ an/2+n/2<br>=(a+…+an/2) + an/2(a+…+an/2)<br>=Sn/2+ an/2Sn/2<br>=(1+an/2)Sn/2  </li><li>若n是奇数<br>Sn= a+…+a(n-1)/2 + a(n-1)/2+1 +…+<br>&emsp; &emsp;a(n-1)/2+(n-1)/2 + a(n-1)/2+(n-1)/2 + 1<br>=S(n-1)/2 + a(n-1)/2(a+…+a(n-1)/2)+an<br>=(1+a(n-1)/2)S(n-1)/2+an<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PowSumMod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">// return (a+ a^2 + ... + a^n) Mod p;</span><br>    <span class="hljs-keyword">if</span>( n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> a%p;<br>    <span class="hljs-keyword">if</span>( n %<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>+<span class="hljs-built_in">PowMod</span>(a,n/<span class="hljs-number">2</span>,p))*<span class="hljs-built_in">PowSumMod</span>(a,n/<span class="hljs-number">2</span>,p) % p;<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-built_in"><span class="hljs-keyword">return</span></span> ((<span class="hljs-number">1</span>+<span class="hljs-built_in">PowMod</span>(a,(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>,p)) * <span class="hljs-built_in">PowSumMod</span>(a,(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>,p) + <span class="hljs-built_in">PowMod</span>(a,n,p)) % p;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hyperldeger Fabric环境搭建</title>
    <link href="/2022/01/11/Hyperldeger-Fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/01/11/Hyperldeger-Fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Hyperledger-Fabric环境搭建"><a href="#Hyperledger-Fabric环境搭建" class="headerlink" title="Hyperledger Fabric环境搭建"></a>Hyperledger Fabric环境搭建</h2><h3 id="Linux环境"><a href="#Linux环境" class="headerlink" title="Linux环境"></a>Linux环境</h3><p>Vmware或者云服务器，推荐CentOS7.0版本及以上，Ubuntu也可以。</p><p>因为hyperledger fabric源码在github上，自己搭建Linux环境大概率会在后面出现git项目失败。为了节省时间，我毕业设计的服务器搭建在了腾讯云服务器上。在云服务器上一下步骤一遍通过！2022年1月11日尝试用VMWare虚拟机中的CentOS7.6搭建一下环境，中间出现了多次git失败的情况，最终耗费数小时还是成功部署环境。</p><h3 id="更换yum源"><a href="#更换yum源" class="headerlink" title="更换yum源"></a>更换yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装vim</span><br>yum install vim<br>yum install wget -y<br><span class="hljs-built_in">cd</span> /etc/yum.repos.d/<br>wget http://mirrors.aliyun.com/repo/Centos-7.repoC<br>mv CentOS-Base.repo CentOS-Base.repo.bak<br>mv Centos-7.repo CentOS-Base.repo<br>yum clean all<br>yum makecache<br>yum update<br></code></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 卸载旧版本的docker</span><br>sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br><br>sudo yum install -y yum-utils<br><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br>    <br>sudo yum install docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-comment"># 启动docker</span><br>sudo systemctl start docker<br></code></pre></td></tr></table></figure><p>​    配置docker镜像站，这里我用的是daocloud的镜像站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io<br></code></pre></td></tr></table></figure><h3 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h3><p>这里我用vmware虚拟机下载不下来docker-compose，目前不知道解决办法。云服务器倒是能够直接访问github下载到docker-compose。（我猜测主要原因是网络问题，毕竟需要从github上拉代码）</p><p>这里的代码是从docker-compose官网安装教程上复制来的。不过可能使用的时候出现网络错误而不能成功运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br></code></pre></td></tr></table></figure><p>这里我用的下面命令才把dock-compose二进制代码从github拉下来，二者区别主要是docker-compose版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><br>sudo chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><br>//查看是否安装成功，docker版本号<br>docker-compose --version<br>docker-compose version 1.23.2, build 1110ad01<br></code></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /resource<br><span class="hljs-built_in">cd</span> /resource/<br>wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz<br>tar xzvf go1.11.linux-amd64.tar.gz -C /usr/<span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这个目录用来存放go的一些源码（我理解为库函数）</span><br>mkdir /opt/gopath<br>vim /etc/profile<br><span class="hljs-comment"># 将下面代码粘贴进去（这里的GOPATH自己可以选一个自己想放的位置）</span><br><span class="hljs-built_in">export</span> GOROOT=/usr/<span class="hljs-built_in">local</span>/go<br><span class="hljs-built_in">export</span> GOPATH=/opt/gopath<br><span class="hljs-built_in">export</span> GOROOT=/usr/<span class="hljs-built_in">local</span>/go<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-comment"># 使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment"># 查看是否配置成功</span><br>go env<br></code></pre></td></tr></table></figure><h3 id="Fabric安装"><a href="#Fabric安装" class="headerlink" title="Fabric安装"></a>Fabric安装</h3><ol><li><p>将fabric-samples下载到<code>$GOPATH/src/github.com/hyperledger</code>目录中</p><p>网上很多教程都是fabirc 1.4.0版本的，但是现在从github上git下来的项目中是不存在first-network这个，需要将版本切换到1.4.0。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-comment"># 首先安装git</span><br>yum -y install git<br><span class="hljs-comment"># 克隆fabric-samples项目并切换到v1.4tag</span><br><span class="hljs-comment">#这一步容易卡在一直处于建立连接中，ctrl+c断掉，重新再来。用虚拟机来搞环境的话，能不能下载下来全看运气了。如果用的云服务器，很容易git下来fabric-samples项目。</span><br>git <span class="hljs-built_in">clone</span> https://github.com/hyperledger/fabric-samples.git<br><span class="hljs-built_in">cd</span> fabric-samples<br>git checkout -b sample v1.4.0<br></code></pre></td></tr></table></figure><p>​    以上操作完后，我们会在fabric-samples文件中看到一个first-network项目。</p><ol start="2"><li><p>Fabric相关的Docker镜像</p><p>这里的操作是为了避免网络原因导致Hyperledger Fabric二进制文件git不下来，下面的操作只进行docker相关的部分。之后我们会选择自己下载Hyperledger Fabric二进制等必须文件，避免在出现网络环境的情况下不知道自己到底哪部份没有成功git或者pull下来。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入fabric-samples中的script文件夹</span><br><span class="hljs-built_in">cd</span> /scripts<br><span class="hljs-comment"># 用#注释掉binaryDownload()函数以及binaryInstall命令，如下图所示。</span><br>vim bootstrap.sh<br><span class="hljs-comment"># 必须启动docker才能运行bootstrap.sh脚本，这里docker pull需要一定的时间，网络环境应该不会出现问题。</span><br>systemctl start docker<br>./bootstrap.sh<br></code></pre></td></tr></table></figure><img src="Hyperldeger-Fabric环境搭建/image-20220111231035328.png" style="zoom: 33%;" /><img src="Hyperldeger-Fabric环境搭建/image-20220111230745152.png" style="zoom: 50%;" /><h4 id="bootstrap-sh脚本运行失败解决方法"><a href="#bootstrap-sh脚本运行失败解决方法" class="headerlink" title="bootstrap.sh脚本运行失败解决方法"></a>bootstrap.sh脚本运行失败解决方法</h4><ul><li><p>下载相关Docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载Fabric相关镜像（fabric-peer、fabric-orderer、fabric-ccenv、fabric-tools），此处以fabric-peer镜像为例，其他镜像同理</span><br>docker pull hyperledger/fabric-peer:1.4.0<br>docker tag hyperledger/fabric-peer:1.4.0 hyperledger/fabric-peer:latest<br><br><span class="hljs-comment"># 下载Fabric第三方镜像（fabric-couchdb、fabric-kafka、fabric-zookeeper），此处以fabric-couchdb为例，其他镜像同理</span><br>docker pull hyperledger/fabric-couchdb:0.4.14<br>docker tag hyperledger/fabric-couchdb:0.4.14 hyperledger/fabric-couchdb:latest<br><br><span class="hljs-comment"># 下载Fabric CA镜像</span><br>docker pull hyperledger/fabric-ca:1.4.0<br>docker tag hyperledger/fabric-ca:1.4.0 hyperledger/fabric-ca:latest<br></code></pre></td></tr></table></figure></li><li><p>（可选）镜像的备份与恢复（我没用过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将上述Docker镜像存储到fabric-images文件中</span><br>docker save $(docker images | grep fabric | grep latest | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>) -o fabric-images<br><span class="hljs-comment"># 若需要多机部署，则通过下列命令将其分发到其他机器</span><br>scp fabric-images ubuntu@192.168.70.21:~<br><span class="hljs-comment"># 在192.168.70.21上加载上述镜像</span><br>docker load -o fabric-images<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>下载Fabric二进制文件</p><p>这里的v1.4.0只是网上的一个大众选择，可以从官方github上找到最新的版本下载。同时，这里下载的Hyperledger Fabric二进制文件和CA证书会出现连接不到github的现象，这里可以多次运行一下的wget指令。（具体什么时候能连接上全看网络环境和运气orz）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /resource<br>wget https://github.com/hyperledger/fabric/releases/download/v1.4.0/hyperledger-fabric-linux-amd64-1.4.0.tar.gz<br><br><br>wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.0/hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz<br><br>tar xzvf hyperledger-fabric-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br>tar xzvf hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br><br><span class="hljs-comment">#向/etc/profile中写入环境变量</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin:<span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/bin<br><br><span class="hljs-comment">#使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ol><h3 id="启动first-network样例"><a href="#启动first-network样例" class="headerlink" title="启动first-network样例"></a>启动first-network样例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/first-network<br><span class="hljs-comment"># 编译通过Golang开发的chaincode并启动相关的容器</span><br>启动（过程比较长，可能需要几分钟）<br>./byfn.sh up   <br><br><span class="hljs-comment">#停止first-network网络中所有的容器，删除crypto材料和4个artifacts（genesis.block、mychannel.block、Org1MSPanchor.tx、Org2MSPanchor.tx）以及chaincode镜像</span><br>./byfn.sh down   <span class="hljs-comment">#请不要随便使用该命令</span><br></code></pre></td></tr></table></figure><p>​    出现和如下图所示的语句，即证明环境搭建成功~</p><img src="Hyperldeger-Fabric环境搭建/image-20220111234616111.png" style="zoom:50%;" />]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
