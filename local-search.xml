<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>rust_list</title>
    <link href="/2024/05/11/rust-list/"/>
    <url>/2024/05/11/rust-list/</url>
    
    <content type="html"><![CDATA[<h1>Rust 单链表（Stack）</h1><p>​用C/C++实现链表的时候，我们都需要先定义一个如下的结构体，这样我们就可以利用指针来实现链表的基本操作了，具体过程这里就忽略了（好久没写过C++了，已经不会写了…）。</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span> &#123;</span><br><span class="hljs-keyword">int</span> val;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span>* <span class="hljs-title">next</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="思路1">思路1</h3><p>​这段代码中定义了一个枚举 <code>List</code>，它有两个变体：<code>Empty</code> 表示空列表，<code>Elem</code> 包含一个整数元素和另一个 <code>List</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">List</span></span> &#123;<br>    Empty,<br>    Elem(<span class="hljs-built_in">i32</span>, List),<br>&#125;<br><br>$ cargo run<br>error[E0072]: recursive <span class="hljs-class"><span class="hljs-keyword">type</span> `<span class="hljs-title">List</span></span>` has infinite size<br> --&gt; src/first.rs:<span class="hljs-number">1</span>:<span class="hljs-number">1</span><br>  |<br><span class="hljs-number">1</span> | <span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">List</span></span> &#123;<br>  | ^^^^^^^^^^^^^ recursive <span class="hljs-class"><span class="hljs-keyword">type</span> <span class="hljs-title">has</span></span> infinite size<br><span class="hljs-number">2</span> |     Empty,<br><span class="hljs-number">3</span> |     Elem(<span class="hljs-built_in">i32</span>, List),<br>  |               ---- recursive without indirection<br>help: insert some indirection (e.g., a `<span class="hljs-built_in">Box</span>`, `Rc`, or `&amp;`) to make `List` representable<br>  |<br><span class="hljs-number">3</span> |     Elem(<span class="hljs-built_in">i32</span>, <span class="hljs-built_in">Box</span>&lt;List&gt;),<br><br></code></pre></td></tr></table></figure><p>​这竟然是错的，编译器提示递归定义，我们需要使用间接的方式（指针）使链表可展示，这是因为我们不知道当前节点需要链接的链表是什么样子的，它的大小是未知的，编译器无法确定，这在 Rust 中是不允许的，因为 Rust 需要在编译时确定类型的大小。为了解决这个问题，它提示我们使用 <code>Box</code> ，<code>Rc</code>或<code>&amp;</code>来包装 <code>List</code> 类型，以便使它变为一个已知大小的指针。</p><h3 id="思路2">思路2</h3><p>​我让gpt帮我生成了一个<code>&amp;</code>包装的<code>List</code> 类型（生命周期这里我了解的还不是很深入，等搞懂了我再来修改这篇文章），感觉这样的操作跟C++指针很像。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">List</span></span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt; &#123;<br>    Empty,<br>    Elem(<span class="hljs-built_in">i32</span>, &amp;<span class="hljs-symbol">&#x27;a</span> List&lt;<span class="hljs-symbol">&#x27;a</span>&gt;),<br>&#125;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> first &#123;<br>    <span class="hljs-keyword">use</span> super::List;<br>    <br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">basics</span></span>() &#123;<br>        <span class="hljs-keyword">let</span> empty_list = List::Empty;<br>        <span class="hljs-keyword">let</span> list_with_one_element = List::Elem(<span class="hljs-number">1</span>, &amp;empty_list);<br>        <span class="hljs-keyword">let</span> list_with_two_elements = List::Elem(<span class="hljs-number">2</span>, &amp;list_with_one_element);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​可是当我们想要销毁某个节点的时候，这个时候就会遇到很多问题了。在 Rust 中，基于 <code>&amp;</code> 实现手动释放特定节点的内存是相当困难的，因为 Rust 的所有权模型不允许直接释放引用的内存。但是，你可以使用 <code>unsafe</code> 代码块来绕过 Rust 的安全检查，手动释放节点的内存。但是这样做非常不推荐，因为可能导致内存安全问题，包括内存泄漏、野指针等。这里我们了解一下可以这样实现即可，以后也不会这样构造一个链表。</p><h3 id="思路3">思路3</h3><p>​这次我们使用<code>Box</code>包装的<code>List</code> 类型来实现单链表（栈 Stack）。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">List</span></span> &#123;<br>    Empty,<br>    Elem(<span class="hljs-built_in">i32</span>, <span class="hljs-built_in">Box</span>&lt;List&gt;),<br>&#125;<br></code></pre></td></tr></table></figure><p>​当生成新的节点的时候，它会在栈内存中给头节点分配内存空间，其他节点都被分配到堆内存中。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs rust">[] = Stack<br>() = Heap<br><br>[Elem A, ptr] -&gt; (Elem B, ptr) -&gt; (Empty, *junk*)<br></code></pre></td></tr></table></figure><p>​链表的最后一个元素看起来并不像是一个<code>Node</code>，可是它还是被分配到了堆内存。此外，明明是同样的结构，为什么只把头节点分配到栈内存中呢？这显然不是一种合理的解法。其实，我们更希望所有节点在堆上，但是又觉得最后一个节点不应该在堆上。那再来考虑另一种方式：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust">[ptr] -&gt; (Elem A, ptr) -&gt; (Elem B, ptr) -&gt; (Elem C, *null*)<br><br>从Elem C对应的节点将链表拆分为两个链表，它的形式应该如下：<br><br>[ptr] -&gt; (Elem A, ptr) -&gt; (Elem B, *null*)<br>[ptr] -&gt; (Elem C, *null*)<br></code></pre></td></tr></table></figure><p>​此外，从编程的角度而言，我们希望让实现细节只保留在内部，而不是对外公开，因此以下代码相对会更加适合（这里我自己将链表的数据类型实现了泛型）：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/// [ptr] -&gt; (elem1, ptr2) -&gt; (elem2, ptr3) -&gt; (elem3, ptr4) -&gt; (elem4, null)</span><br><span class="hljs-comment">// []stack ()heap</span><br><span class="hljs-keyword">use</span> std::mem;<br><span class="hljs-keyword">pub</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">List</span></span>&lt;T&gt; &#123;<br>    head: Link&lt;T&gt;,<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Link</span></span>&lt;T&gt; &#123;<br>    Empty,<br>    NonEmpty(<span class="hljs-built_in">Box</span>&lt;Node&lt;T&gt;&gt;),<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span></span>&lt;T&gt; &#123;<br>    elem: T,<br>    next: Link&lt;T&gt;,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; List&lt;T&gt; &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">new</span></span>() -&gt; <span class="hljs-keyword">Self</span> &#123;<br>        List &#123; head: Link::Empty &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">push</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, var: T) &#123;<br>        <span class="hljs-keyword">let</span> new_node = <span class="hljs-built_in">Box</span>::new(Node &#123;<br>            elem: var,<br>            <span class="hljs-comment">// 虽然我们在方法签名中传递了 &amp;mut self，</span><br>            <span class="hljs-comment">// 但是在 mem::replace() 中使用了 &amp;mut self.head </span><br>            <span class="hljs-comment">// 是因为我们实际上是在修改 self.head 的内容，而不是 self 本身。</span><br>            next: mem::replace(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>.head, Link::Empty),<br>        &#125;);<br>        <span class="hljs-keyword">self</span>.head = Link::NonEmpty(new_node);<br>    &#125;<br><br>    <span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">pop</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) -&gt; <span class="hljs-built_in">Option</span>&lt;T&gt; &#123;<br>        <span class="hljs-keyword">match</span> mem::replace(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>.head, Link::Empty) &#123;<br>            Link::Empty =&gt; <span class="hljs-literal">None</span>,<br>            Link::NonEmpty(node) =&gt; &#123;<br>                <span class="hljs-keyword">self</span>.head = node.next;<br>                <span class="hljs-literal">Some</span>(node.elem)<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; <span class="hljs-built_in">Drop</span> <span class="hljs-keyword">for</span> List&lt;T&gt; &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">drop</span></span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-comment">// 当前节点是NonEmpty类型时，将它替换为Empty类型。</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> Link::NonEmpty(<span class="hljs-keyword">mut</span> node ) = mem::replace(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>.head, Link::Empty) &#123;<br>            <span class="hljs-keyword">self</span>.head = mem::replace(&amp;<span class="hljs-keyword">mut</span> node.next, Link::Empty);<br>        &#125;<br>    &#125;   <br>&#125;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> first &#123;<br>    <span class="hljs-keyword">use</span> super::List;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">basics</span></span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> list = List::new();<br><br>        <span class="hljs-comment">// Check empty list behaves right</span><br>        <span class="hljs-built_in">assert_eq!</span>(list.pop(), <span class="hljs-literal">None</span>);<br><br>        <span class="hljs-comment">// Populate list</span><br>        list.push(<span class="hljs-number">1</span>);<br>        list.push(<span class="hljs-number">2</span>);<br>        list.push(<span class="hljs-number">3</span>);<br><br>        <span class="hljs-comment">// Check normal removal</span><br>        <span class="hljs-built_in">assert_eq!</span>(list.pop(), <span class="hljs-literal">Some</span>(<span class="hljs-number">3</span>));<br>        <span class="hljs-built_in">assert_eq!</span>(list.pop(), <span class="hljs-literal">Some</span>(<span class="hljs-number">2</span>));<br><br>        <span class="hljs-comment">// Push some more just to make sure nothing&#x27;s corrupted</span><br>        list.push(<span class="hljs-number">4</span>);<br>        list.push(<span class="hljs-number">5</span>);<br><br>        <span class="hljs-comment">// Check normal removal</span><br>        <span class="hljs-built_in">assert_eq!</span>(list.pop(), <span class="hljs-literal">Some</span>(<span class="hljs-number">5</span>));<br>        <span class="hljs-built_in">assert_eq!</span>(list.pop(), <span class="hljs-literal">Some</span>(<span class="hljs-number">4</span>));<br><br>        <span class="hljs-comment">// Check exhaustion</span><br>        <span class="hljs-built_in">assert_eq!</span>(list.pop(), <span class="hljs-literal">Some</span>(<span class="hljs-number">1</span>));<br>        <span class="hljs-built_in">assert_eq!</span>(list.pop(), <span class="hljs-literal">None</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>以太坊测试网络Rinkeby使用教程</title>
    <link href="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>出于学习和测试的目的，以太坊官方推出了一些测试网络，使用了与主网络不同的创世区块，测试网中的代币是没有价值的。以太坊公开的测试网络共有4个，目前仍在运行的有4个，分别为Goerli、Ropsten、Kovan、Rinkeby。</p><img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710154934533.png" class=""><h3 id="一、Rinkeby">一、Rinkeby</h3><p>​Rinkeby 是开发人员目前常用的测试网络，使用PoA共识机制，访问地址: <a href="https://link.jianshu.com/?t=https%3A%2F%2Fwww.rinkeby.io%2F">https://www.rinkeby.io/</a><br>​本文从以下几方面介绍Rinkeby 的基本使用方法：</p><ul><li>创建 Rinkeby 账户</li><li>获取 Rinkeby 的以太币</li><li>智能合约部署</li><li>智能合约交互</li></ul><h3 id="二、创建-Rinkeby-账户">二、创建 Rinkeby 账户</h3><p>​首先我们需要一个钱包来管理账户，目前可选的有MetaMask、Coinbase Wallet、WalletConnect等，我比较推荐使用主流的MetaMask钱包。本篇文章的所有操作均通过MetaMask进行操作。</p><p>​1、安装MetaMask</p><p>​MetaMask属于浏览器插件应用，官网：<a href="https://metamask.io/">The crypto wallet for Defi, Web3 Dapps and NFTs | MetaMask</a>，进入后下载安装即可。</p><p>​2、注册</p><p>​接下来就是简单的注册过程，此处需要保存好自己的助记词。按照我的理解，助记词是为了让你在忘记MetaMask登录密码时能够找回自己的钱包。MetaMask钱包能够注册多个账户。</p><p>​3、切换至Rinkeby测试网络环境</p><p>​<img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710155752391.png" class=""></p><h3 id="三、获取Rinkeby-的以太币">三、获取Rinkeby 的以太币</h3><p>​刚注册的账户是没有以太币的，想获取Rinkeby测试网络中的以太币，需要我们通过官方给出的方法去申请，这个申请Rinkeby以太币的功能被称为水龙头(Faucet)。网站地址：<a href="https://www.rinkeby.io/#faucet">https://www.rinkeby.io/#faucet</a> （有时候水龙头服务节点会问题，无法申请到测试币，我们可以自行百度其他申请方式）</p><p>​为了确保不会出现有人滥用水龙头，无限申请Rinkeby以太币。水龙头需要借助第三方账号来确定申请者的身份和配额。目前提供的获取方法是在Twitter、FaceBook任意一个社交网络上发布一条带有钱包地址的消息，并将消息的网址粘贴到上面截图的输入框中选个获取就可以。我们以FaceBook账户为例（额，我的Twitter不知道什么原因被冻结了，无法发布帖子）。</p><img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710160112111.png" class=""><p>​自行注册一个twitter或facebook账号即可，然后发一条帖子。</p><img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710160258929.png" class=""><p>发布的内容就是钱包地址，获取方式如下图所示。</p><img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710160356133.png" class=""><p>​发送成功后，进入这条Tweet内容，然后copy以下当前推文的地址。</p><img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220619213140683.png" class=""><p>​将刚才复制的地址粘贴到Rinkeby Authenticated Faucet的URL输入框中，随意选择一个测试币的有效时间即可。</p><img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220619213306397.png" class=""><p>​稍等片刻，MetaMask上就会显示我们当前账户的余额。</p><h3 id="四、智能合约部署">四、智能合约部署</h3><p>​如果使用的是MetaMask的话，你必须要有智能合约的源码，不然没有办法部署成功。如果向通过ABI和Bytecode部署的话可以使用Myetherwallet钱包。</p><p>​1、编译智能合约</p><p>​<img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710162030797.png" class=""></p><p>​2、部署智能合约</p><p>​<img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710162051195.png" class=""></p><h3 id="六、智能合约交互">六、智能合约交互</h3><p>​当智能合约部署成功后，我们会在上图5号红框那里看到智能合约中开放的所有API，如下图所示：</p><img src="/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/image-20220710162152235.png" class=""><p>​我们根据函数功能，将参数填入输入框后点击左侧函数名称即可实现智能合约交互。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何在Linux云服务器上部署IPFS</title>
    <link href="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/"/>
    <url>/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/</url>
    
    <content type="html"><![CDATA[<h3 id="一、准备必须的环境">一、准备必须的环境</h3><h4 id="配置GoLang环境">配置GoLang环境</h4><p>下载GoLang二进制文件</p><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /home<br>// 建议自己去GitHub上找一下最新版的链接<br>wget https://go.dev/dl/go1.18.3.linux-amd64.tar.gz<br>tar -zxvf go1.18.3.linux-amd64.tar.gz -C /usr/<span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><p>配置GoLang环境</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim /etc/profile<br><br><span class="hljs-comment">#文件末尾追加（类似于配置java环境）</span><br><span class="hljs-comment"># golang env</span><br><span class="hljs-built_in">export</span> GOROOT=/usr/<span class="hljs-built_in">local</span>/go<br><span class="hljs-built_in">export</span> GOPATH=/data/gopath<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin:<span class="hljs-variable">$GOPATH</span>/bin<br><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="二、IPFS部署">二、IPFS部署</h3><p>下载go-ipfs二进制文件，解压后运行install.sh脚本。（因为服务器在国外，所以可能wget失败go-ipfs二进制文件，建议直接去GitHub下载后上传到服务器，GoLang二进制文件同理）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget https://dist.ipfs.io/go-ipfs/v0.13.0/go-ipfs_v0.13.0_linux-amd64.tar.gz<br>tar -xvzf go-ipfs_v0.13.0_linux-amd64.tar.gz<br><span class="hljs-built_in">cd</span> go-ipfs<br>sudo bash install.sh<br></code></pre></td></tr></table></figure><p>测试是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipfs --version<br><span class="hljs-comment"># 成功的话会显示ipfs版本号</span><br>&gt; ipfs version 0.13.0<br></code></pre></td></tr></table></figure><p>如果需要指定ipfs的存储位置，则修改下面bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> IPFS_PATH=<span class="hljs-string">&quot;/root/.ipfs/&quot;</span>   <span class="hljs-comment">#这里的路径是样例，可以修改为自己的路径 </span><br></code></pre></td></tr></table></figure><p>IPFS初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipfs init<br>ipfs cat /ipfs/QmQPeNsJPyVWPFDVHb77w8G42Fvo15z4bG2X8D2GhfbSXc/readme  <span class="hljs-comment">#根据init而来</span><br>ipfs id<br></code></pre></td></tr></table></figure><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/ipfs_init.png" class=""><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/ipfs_id.png" class=""><p>ipfs文件夹存放在/root/下面（通过ipfs init可得），路径可根据当前ubuntu 用户而定，此处我用的root权限。文件如下：</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/ipfs_files.png" class=""><ul><li>blocks:文件块内容</li><li>conifg:配置文件</li><li>datastore_spec:存储本地数据</li><li>keystore:存储公私钥对</li><li>version:版本信息</li></ul><h3 id="三、修改配置文件config">三、修改配置文件config</h3><p>把配置文件中的Address下的API 和 Gatway 的IP地址改为自己的本地地址，如果是部署在虚拟机中想通过本机访问的话全改为0.0.0.0。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi config<br></code></pre></td></tr></table></figure><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/ipfs_viconfig.png" class=""><h3 id="四、开启节点">四、开启节点</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ipfs daemon<br></code></pre></td></tr></table></figure><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/ipfs_daemon.png" class=""><p>在浏览器中输入图中的WebUI:<a href="http://xn--IP-fr5c86lx7z:5001/webui,%E5%B0%B1%E4%BC%9A%E5%BC%B9%E5%87%BA%EF%BC%9A">http://服务器IP:5001/webui,就会弹出：</a></p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/ipfs_success.png" class=""><p>以上就是完整的部署过程~</p><p>如果你是部署在云服务上的话，这时你会出下下面错误：</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/ipfs_webui1.png" class=""><p>这里出现问题是因为默认配置没有解决路由跨域问题，只需要运行下面的两条bash再刷新就成功了！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何使用goblintownNFT智能合约发布属于自己的NFT</title>
    <link href="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/"/>
    <url>/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/</url>
    
    <content type="html"><![CDATA[<h3 id="一、安装并注册MateMask钱包账户">一、安装并注册MateMask钱包账户</h3><p>1、安装MetaMask</p><p>MetaMask属于浏览器插件应用，官网：<a href="https://metamask.io/">The crypto wallet for Defi, Web3 Dapps and NFTs | MetaMask</a>，进入后下载安装即可。</p><p>2、注册</p><p>接下来就是简单的注册过程，此处需要保存好自己的助记词。按照我的理解，助记词是为了让你在忘记MetaMask登录密码时能够找回自己的钱包。MetaMask钱包能够注册多个账户。</p><h3 id="二、切换至Rinkeby测试网络">二、切换至Rinkeby测试网络</h3><p>此处参考我的另一篇博客<a href="http://localhost:4000/2022/07/10/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9CRinkeby%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">《Rinkeby以太坊测试网络部署》</a></p><h3 id="三、goblintownNFT合约的部署">三、goblintownNFT合约的部署</h3><p>1、进入<a href="https://etherscan.io/address/0xbce3781ae7ca1a5e050bd9c4c77369867ebc307e#code">goblintown</a>将该项目的智能合约copy到在线solidity编辑网站<a href="https://remix.ethereum.org/">Remix</a></p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/1.png" class=""><p>2、编译并部署到以太坊测试网络Rinkeby中</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/2.png" class=""><p>最左侧红框中没有出现红色就说明智能合约语法不存在错误。</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/3.png" class=""><p>不出意外的话，到这里合约就已经部署完成了。5号红框那里有合约在以太坊上的地址，我们可以到Etherscan中查看这个地址，包括后续的一些合约操作，交易记录等都会在上面显示。同时，我们可以看到合约中的函数，如下图所示：</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/4.png" class=""><h3 id="四、将我们的NFT-Meta-json文件放置到IPFS上">四、将我们的NFT Meta_json文件放置到IPFS上</h3><p>IPFS我使用的是 <a href="https://app.pinata.cloud/">Pinata</a> ，它好像有一个免费的1G存储容量。不过也可以自己搭建IPFS服务器，具体可参考我的另一篇博客<a href="https://chwzx.github.io/2022/07/08/%E5%A6%82%E4%BD%95%E5%9C%A8Linux%E4%B8%8A%E9%83%A8%E7%BD%B2IPFS/">《如何在Linux上部署IPFS》</a>。NFT的JSON格式如下：</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/5.png" class=""><p>我们自己NFT的JSON文件放在一个文件夹里上传到IPFS服务器上，注意JSON文件的<strong>文件名</strong>和<strong>后缀</strong>。例如：</p><p><img src="D:%5Cwzx%5CDocuments%5Cblog%5Csource_posts%5C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT%5C6.png" alt=""></p><p>上传完成后会显示下面界面，我们最终需要的就是该文件的<strong>CID</strong>。</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/7.png" class=""><h3 id="五、mint-NFT">五、mint NFT</h3><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/10.png" class=""><p>按照顺序依次执行以上步骤，我们就可以得到我们自己的NFT啦~</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/9.png" class=""><p>首先，我在这里解释一下tokenid，我的理解是tokenid = num(NFT) - 1，例如你已经有10个NFT，那么tokenid = 9。在刚开始部署智能合约的时候 tokenid = 0，每次mint NFT的时候，会执行智能合约中的totalSupply函数来获得当前num(NFT)。</p><p>opensea通过获取ipfs://CID/<strong>string</strong>文件的方式来展示NFT（因为存在放ipfs上的资源可以通过URL直接在浏览器上访问到，具体的URL格式如：<a href="https://ipfs.io/ipfs/QmfPoHvSMMJ8V5XtWGSbWUqAMy6vkNyH7P8aw3uc2134gY/0">https://ipfs.io/ipfs/QmfPoHvSMMJ8V5XtWGSbWUqAMy6vkNyH7P8aw3uc2134gY/0</a>  ，服务器在国外，ipfs.io这个域名可能会访问不到，更换一个可用的域名 <a href="https://ipfs.github.io/public-gateway-checker/">IPFS公共网关</a>  即可），在该智能合约中<strong>tokenid = 地址中的string</strong>，这样就是为什么我们需要把JSON文件的后缀去除掉。上面图片中名称是3的NFT是空图，是因为该图片在IPFS服务器中的文件格式为3.json，这时候代码opensea是识别不出来的，具体原因如下图源码可知。</p><img src="/2022/07/08/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8goblintownNFT%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%91%E5%B8%83%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84NFT/8.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>区块链溯源系统环境部署</title>
    <link href="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>以下教程是在win10上完成的。</p><h1>软件安装</h1><p>nodejs安装：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a>   这是用来运行前端的</p><p>win键+r键 ，输入cmd,看一下npm版本，有版本就代表成功了。</p><figure class="highlight cmd"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">C:\<span class="hljs-title">Users</span>\2407288830&gt;<span class="hljs-title">npm</span> -<span class="hljs-title">version</span></span><br><span class="hljs-function">6.13.4  </span><br></code></pre></td></tr></table></figure><p>idea安装和破解：<a href="https://www.mubucm.com/doc/rTDUIGvfnk">https://www.mubucm.com/doc/rTDUIGvfnk</a>   用来运行后端</p><p>java jdk要求：建议1.8版本      一定要是64位的，不然使用链区块sdk的时候会报错</p><p>finalshell安装：<a href="http://www.hostbuf.com/t/988.html">http://www.hostbuf.com/t/988.html</a>   相当于xshell，用来连接服务器的。</p><h1>Hyperledger Fabric1.4.0 环境配置</h1><p>部署最简单的Hyperleger fabric，首先需要买个服务器:<a href="https://www.aliyun.com/minisite/goods?userCode=svaj1q3t&amp;share_source=copy_link">https://www.aliyun.com/minisite/goods?userCode=svaj1q3t&amp;share_source=copy_link</a></p><p>有钱买配置好一点，2核4G，没钱买1核2G，当然带宽是越大越好，5M最好，1M也可以用，就是有点慢，Centos和Ubuntu系统都行，我这个教程用的是Centos系统。如果你使用虚拟机也是完全ok的，但是操作可能会有一点点小的事故，比如连不上网，可能需要百度一下自己解决一下。</p><h2 id="开放服务器的端口">开放服务器的端口</h2><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image1.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211213152631550.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211213152650088.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211213152706298.png" class=""><h2 id="使用finalShell连接服务器">使用finalShell连接服务器</h2><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211214141123682.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211214141744104.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211214141920066.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211214142651435.png" class=""><h2 id="Fabric-v1-4-0安装部署-全程复制粘贴就ok">Fabric v1.4.0安装部署  全程复制粘贴就ok</h2><h3 id="一、前期准备">一、前期准备</h3><table><thead><tr><th>编号</th><th>工具</th><th>版本号</th></tr></thead><tbody><tr><td>1</td><td><a href="https://curl.haxx.se/download.html">cURL</a></td><td>最新版（7.63.0）</td></tr><tr><td>2</td><td><a href="https://www.docker.com/get-started">Docker</a></td><td>17.06.2-ce及其以上版本</td></tr><tr><td>3</td><td><a href="https://docs.docker.com/compose/overview/">Docker Compose</a></td><td>1.14.0及其以上版本</td></tr><tr><td>4</td><td><a href="https://golang.org/dl/">Go</a></td><td>1.11.x</td></tr></tbody></table><ol><li><p><strong>cURL最新版安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载最新版的cURL并将其解压到指定目录（此处以/opt目录为例）</span><br><span class="hljs-built_in">cd</span> /<br>mkdir resource<br><span class="hljs-built_in">cd</span> /resource<br>wget https://curl.haxx.se/download/curl-7.63.0.tar.gz<br>sudo tar xzvf curl-7.63.0.tar.gz -C /opt<br><br><span class="hljs-comment"># 编译并安装cURL</span><br><span class="hljs-built_in">cd</span> /opt/curl-7.63.0<br>./configure<br>make<br>sudo make install<br></code></pre></td></tr></table></figure><p>通过运行<code>curl --version</code>查看是否安装成功，若结果如下图所示，则表示安装成功。</p><p><strong>若出现下图所示错误，则需进行如下操作,没出现错误则不需要以下操作。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在/etc/ld.so.conf加入/usr/local/lib这一行内容</span><br>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;/usr/local/lib&quot;</span> &gt;&gt; /etc/ld.so.conf<br><br><span class="hljs-comment"># 执行下列命令使加入的内容生效</span><br>sudo /sbin/ldconfig -v<br></code></pre></td></tr></table></figure></li><li><p><strong>Docker和Docker Compose安装</strong></p><ul><li><p>Docker(参考<a href="https://docs.docker.com/engine/install/centos/">Get Docker CE for Ubuntu</a>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum install -y yum-utils<br><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br>   <br>sudo yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-comment">#启动docker</span><br>sudo systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>Docker Compose</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载Docker Compose二进制文件,这一步可能出现下载不了的情况，会一直等待建立连接，ctrl+C终止掉，多试几次就好了</span><br><br>sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><br>sudo chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><span class="hljs-comment">#可以查看是否安装成功</span><br>docker-compose -version<br><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>Go安装</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载go1.11.linux-amd64.tar.gz并将其解压到指定目录（此处为/usr/local）</span><br> <span class="hljs-built_in">cd</span> /resource/<br>wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz<br>tar xzvf go1.11.linux-amd64.tar.gz -C /usr/<span class="hljs-built_in">local</span><br>touch goenvset.sh<br>vim goenvset.sh<br><span class="hljs-comment">#按i插入以下内容，ESC键退出，shift键+:键输入wq 回车退出</span><br>goenvset.sh文件内容如下所示：<br><br>cat &gt;&gt; /etc/profile &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">export GOROOT=/usr/local/go</span><br><span class="hljs-string">export GOARCH=amd64</span><br><span class="hljs-string">export GOOS=linux</span><br><span class="hljs-string">export GOPATH=/home/ubuntu/gopath</span><br><span class="hljs-string">export GOBIN=$GOPATH/bin</span><br><span class="hljs-string">export PATH=$GOPATH/bin:$GOROOT/bin:$PATH</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># 执行已有的goenvset.sh向/etc/profile中写入相应的环境变量</span><br>sudo chmod 705 goenvset.sh      <span class="hljs-comment"># 更改goenvset.sh的权限使其可执行</span><br>sudo ./goenvset.sh<span class="hljs-comment"># 执行goenvset.sh脚本</span><br><br><span class="hljs-comment"># 使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ol><h3 id="二、Fabric安装">二、Fabric安装</h3><ol><li><p>将fabric-samples下载到<code>$GOPATH/src/github.com/hyperledger</code>目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-comment"># 克隆fabric-samples项目并切换到v1.4tag</span><br>yum -y install git<br><span class="hljs-comment">#这一步容易卡在一直处于建立连接中，ctrl+c断掉，重新再来</span><br>git <span class="hljs-built_in">clone</span> https://github.com/hyperledger/fabric-samples.git<br><span class="hljs-built_in">cd</span> fabric-samples<br>git checkout -b sample v1.4.0<br></code></pre></td></tr></table></figure></li><li><p>安装Fabric Binaries和Fabric相关的Docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/scripts<br>vim bootstrap.sh <br><br><span class="hljs-comment">#用#注释掉binaryDownload()函数</span><br></code></pre></td></tr></table></figure><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211214151145232.png" class=""><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">安装Fabric、Fabric-<span class="hljs-keyword">ca</span>以及第三方Docker镜像（./<span class="hljs-keyword">bootstrap</span>.<span class="hljs-keyword">sh</span> &lt;fabric&gt; &lt;fabric-<span class="hljs-keyword">ca</span>&gt; &lt;thirdparty&gt;）<br>./<span class="hljs-keyword">bootstrap</span>.<span class="hljs-keyword">sh</span> 1.4.0 1.4.0 0.4.14<br></code></pre></td></tr></table></figure><p>值得注意的是，如果由于网络问题，此处通过<code>bootstrap.sh</code>脚本安装可能会出错，此时可进行手动安装。安装步骤如下：</p><ul><li><p>将指定版本的Hyperledger Fabric特定于平台的二进制文件和配置文件安装到fabric-samples的bin和config目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /resource/<br>wget https://github.com/hyperledger/fabric/releases/download/v1.4.0/hyperledger-fabric-linux-amd64-1.4.0.tar.gz<br><br><br>wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.0/hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz<br><br>tar xzvf hyperledger-fabric-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br>tar xzvf hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br><br><span class="hljs-comment">#向/etc/profile中写入环境变量</span><br>sudo <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export PATH=$GOPATH/src/github.com/hyperledger/fabric-samples/bin:$PATH&#x27;</span> &gt;&gt; /etc/profile<br><br><span class="hljs-comment">#使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure><h3 id="bootstrap-sh脚本成功下载文件，以下不需要操作-不需要操作">bootstrap.sh脚本成功下载文件，以下不需要操作,不需要操作</h3></li><li><p>下载相关Docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载Fabric相关镜像（fabric-peer、fabric-orderer、fabric-ccenv、fabric-tools），此处以fabric-peer镜像为例，其他镜像同理</span><br>docker pull hyperledger/fabric-peer:1.4.0<br>docker tag hyperledger/fabric-peer:1.4.0 hyperledger/fabric-peer:latest<br><br><span class="hljs-comment"># 下载Fabric第三方镜像（fabric-couchdb、fabric-kafka、fabric-zookeeper），此处以fabric-couchdb为例，其他镜像同理</span><br>docker pull hyperledger/fabric-couchdb:0.4.14<br>docker tag hyperledger/fabric-couchdb:0.4.14 hyperledger/fabric-couchdb:latest<br><br><span class="hljs-comment"># 下载Fabric CA镜像</span><br>docker pull hyperledger/fabric-ca:1.4.0<br>docker tag hyperledger/fabric-ca:1.4.0 hyperledger/fabric-ca:latest<br></code></pre></td></tr></table></figure></li><li><p>（可选）镜像的备份与恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将上述Docker镜像存储到fabric-images文件中</span><br>docker save $(docker images | grep fabric | grep latest | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>) -o fabric-images<br><span class="hljs-comment"># 若需要多机部署，则通过下列命令将其分发到其他机器</span><br>scp fabric-images ubuntu@192.168.70.21:~<br><span class="hljs-comment"># 在192.168.70.21上加载上述镜像</span><br>docker load -o fabric-images<br></code></pre></td></tr></table></figure></li></ul><h3 id="通过运行Build-your-first-network样例来进行测试">通过运行<code>Build your first network</code>样例来进行测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/first-network<br><span class="hljs-comment"># 编译通过Golang开发的chaincode并启动相关的容器</span><br>启动（过程比较长，可能需要几分钟）<br>./byfn.sh up   <br><br><br><span class="hljs-comment">#停止first-network网络中所有的容器，删除crypto材料和4个artifacts（genesis.block、mychannel.block、Org1MSPanchor.tx、Org2MSPanchor.tx）以及chaincode镜像</span><br>./byfn.sh down   <span class="hljs-comment">#请不要随便使用该命令</span><br></code></pre></td></tr></table></figure></li></ol><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215145958700.png" class=""> <p>到这里就算运行成功。</p><h1>项目运行</h1><p>sdkdemo是fabric sdk,运行sdkdemo就可以了。</p><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215153244642.png" class=""> <h2 id="运行后端项目">运行后端项目</h2><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215153505822.png" class=""><h2 id="运行前端项目">运行前端项目</h2><p>在目录oldlot中输入cmd回车</p><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215153559581.png" class=""><p>输入npm run dev 回车</p><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215153705078.png" class=""> <p>注意：如果发现没有node_modules目录，需要先执行一下npm install</p><h2 id="运行区块链sdk">运行区块链sdk</h2><h3 id="准备工作">准备工作</h3><h6 id="域名映射">域名映射</h6><p>编辑<code>C:\Windows\System32\drivers\etc\host</code><br>在最后一行添加下面内容,192.168.xx.xx是你自己服务器(虚拟机)的地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">192.168.xx.xxpeer0.org1.example.com peer1.org1.example.com peer0.org2.example.com peer1.org2.example.com orderer.example.com<br></code></pre></td></tr></table></figure><h6 id="启动网络">启动网络</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">更改世界状态数据库是couchdb启动</span><br><span class="hljs-meta">#</span><span class="bash">访问方式：ip:5984/_utils</span><br>cd /home/ubuntu/gopath/src/github.com/hyperledger/fabric-samples/first-network<br>./byfn.sh up -s couchdb<br><span class="hljs-meta">#</span><span class="bash">启动2个org，4个peer，1个cli，4个couchdb,1个kafka</span><br>docker-compose -f docker-compose-cli.yaml -f docker-compose-couch.yaml -f docker-compose-kafka.yaml start<br></code></pre></td></tr></table></figure><h6 id="生成tx文件">生成tx文件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /home/ubuntu/gopath/src/github.com/hyperledger/fabric-samples/first-network<br>../bin/configtxgen -profile TwoOrgsChannel -outputCreateChannelTx channel-artifacts/test.tx -channelID test<br></code></pre></td></tr></table></figure><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215171522972.png" class=""><blockquote><p>将<code>/opt/gopath/src/github.com/hyperledger/fabric/scripts/fabric-samples/first-network</code>目录下的<code>crypto-config</code>文件拷贝到工程的<code>resources</code>目录下<br>注意：其中在<code>1.4.6</code>版本<code>peerOrganization-org1(2)-users-Admin-msp-admincerts</code>目录下的文件没有，但是可以拷贝同个目录下的<code>signcerts</code>的文件</p></blockquote><p>将生成的<code>test.tx</code>文件拷贝到<code>idea</code>工程的<code>resources</code>目录下</p><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215171631083.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215171838437.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215171950996.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215171914106.png" class=""><p>IDEA乱码配置，之前的项目这样配置的，你可以按照这样配置下，不然可能乱码</p><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215162603128.png" class="">　<p>idea打开sdkdemo</p><p><strong>注意:java 的jdk一定要是64位</strong></p><p>路径是双斜杠\\</p><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215162915220.png" class=""><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215163124434.png" class=""> <img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215164437760.png" class=""><p>运行sdkdemo项目</p><p>在浏览器中调用sdkdemo</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmd">#在浏览器中依次访问下面的网址，不要重复执行<br>#创建通道<br><span class="hljs-function">http://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">createChannel</span></span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">createChannel2</span></span><br><span class="hljs-function">#安装智能合约</span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">chainCodeInstall</span></span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">chainCodeInstall2</span></span><br><span class="hljs-function">#实例化智能合约,比较慢</span><br><span class="hljs-function"><span class="hljs-title">http</span>://<span class="hljs-title">localhost</span>:8081/<span class="hljs-title">sdk</span>/<span class="hljs-title">init</span></span><br></code></pre></td></tr></table></figure><p>三种用户，可以去表里面找对应的账户和密码</p><img src="/2022/03/06/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%BA%AF%E6%BA%90%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/image-20211215175716453.png" class=""> ]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM 数论部分</title>
    <link href="/2022/03/06/ACM_%E6%95%B0%E8%AE%BA/"/>
    <url>/2022/03/06/ACM_%E6%95%B0%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<p>ACM/ICPC中的数学</p><h2 id="一些数论基本定理">一些数论基本定理</h2><p>( a + b ) mod c = ((a mod c) + (b mod c)) mod c<br>( a * b ) mod c = ((a mod c) * (b mod c)) mod c</p><p>消去律：若 gcd(c,p) = 1,则(gcd表示同余数)<br>ac ≡ bc mod p =&gt; a ≡ b mod p</p><h3 id="快速幂">快速幂</h3><p>算法一</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//快速求a^b ，复杂度 log(b) </span><br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">if</span>(b &amp; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//b是奇数</span><br>        <span class="hljs-keyword">return</span> a * <span class="hljs-built_in">Pow</span>(a,b<span class="hljs-number">-1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">Pow</span>(a,b/<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> t * t;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>算法二</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-comment">//快速求a^b ，复杂度 log(b) </span><br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> base = a;<br>    <span class="hljs-keyword">while</span>(b) &#123;<br>        <span class="hljs-keyword">if</span>( b &amp; <span class="hljs-number">1</span>) <br>            result *= base;<br>        base *= base;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="快速幂取模">快速幂取模</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PowMod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b,<span class="hljs-keyword">int</span> c)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">//快速求 a^b % c ，要避免计算中间结果溢出</span><br>    <span class="hljs-keyword">int</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> base = a%c;<br>    <span class="hljs-keyword">while</span>(b) &#123;<br>        <span class="hljs-keyword">if</span>( b &amp; <span class="hljs-number">1</span>) <br>            result = (result * base)%c;<br>        base = (base * base) % c;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="等比数列二分求和取模">等比数列二分求和取模</h3><p>Sn= a+a2+…+an<br>要求 Sn mod p<br>如果用公式算，可能溢出，因此用二分法求</p><ol><li>若 n 是偶数<br>Sn= a+…+an/2 + an/2+1 + an/2+2 +…+ an/2+n/2<br>=(a+…+an/2) + an/2(a+…+an/2)<br>=Sn/2+ an/2Sn/2<br>=(1+an/2)Sn/2</li><li>若n是奇数<br>Sn= a+…+a(n-1)/2 + a(n-1)/2+1 +…+<br>   a(n-1)/2+(n-1)/2 + a(n-1)/2+(n-1)/2 + 1<br>=S(n-1)/2 + a(n-1)/2(a+…+a(n-1)/2)+an<br>=(1+a(n-1)/2)S(n-1)/2+an</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">PowSumMod</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<span class="hljs-comment">// return (a+ a^2 + ... + a^n) Mod p;</span><br>    <span class="hljs-keyword">if</span>( n == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> a%p;<br>    <span class="hljs-keyword">if</span>( n %<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) <br>        <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>+<span class="hljs-built_in">PowMod</span>(a,n/<span class="hljs-number">2</span>,p))*<span class="hljs-built_in">PowSumMod</span>(a,n/<span class="hljs-number">2</span>,p) % p;<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-built_in"><span class="hljs-keyword">return</span></span> ((<span class="hljs-number">1</span>+<span class="hljs-built_in">PowMod</span>(a,(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>,p)) * <span class="hljs-built_in">PowSumMod</span>(a,(n<span class="hljs-number">-1</span>)/<span class="hljs-number">2</span>,p) + <span class="hljs-built_in">PowMod</span>(a,n,p)) % p;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hyperldeger Fabric环境搭建</title>
    <link href="/2022/01/11/Hyperldeger-Fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/01/11/Hyperldeger-Fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="Hyperledger-Fabric环境搭建">Hyperledger Fabric环境搭建</h2><h3 id="Linux环境">Linux环境</h3><p>Vmware或者云服务器，推荐CentOS7.0版本及以上，Ubuntu也可以。</p><p>因为hyperledger fabric源码在github上，自己搭建Linux环境大概率会在后面出现git项目失败。为了节省时间，我毕业设计的服务器搭建在了腾讯云服务器上。在云服务器上一下步骤一遍通过！2022年1月11日尝试用VMWare虚拟机中的CentOS7.6搭建一下环境，中间出现了多次git失败的情况，最终耗费数小时还是成功部署环境。</p><h3 id="更换yum源">更换yum源</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装vim</span><br>yum install vim<br>yum install wget -y<br><span class="hljs-built_in">cd</span> /etc/yum.repos.d/<br>wget http://mirrors.aliyun.com/repo/Centos-7.repoC<br>mv CentOS-Base.repo CentOS-Base.repo.bak<br>mv Centos-7.repo CentOS-Base.repo<br>yum clean all<br>yum makecache<br>yum update<br></code></pre></td></tr></table></figure><h3 id="docker">docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 卸载旧版本的docker</span><br>sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br><br>sudo yum install -y yum-utils<br><br>sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br>    <br>sudo yum install docker-ce docker-ce-cli containerd.io<br><br><span class="hljs-comment"># 启动docker</span><br>sudo systemctl start docker<br></code></pre></td></tr></table></figure><p>​配置docker镜像站，这里我用的是daocloud的镜像站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://f1361db2.m.daocloud.io<br></code></pre></td></tr></table></figure><h3 id="docker-compose">docker-compose</h3><p>这里我用vmware虚拟机下载不下来docker-compose，目前不知道解决办法。云服务器倒是能够直接访问github下载到docker-compose。（我猜测主要原因是网络问题，毕竟需要从github上拉代码）</p><p>这里的代码是从docker-compose官网安装教程上复制来的。不过可能使用的时候出现网络错误而不能成功运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br></code></pre></td></tr></table></figure><p>这里我用的下面命令才把dock-compose二进制代码从github拉下来，二者区别主要是docker-compose版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.23.2/docker-compose-<span class="hljs-subst">$(uname -s)</span>-<span class="hljs-subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><br>sudo chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose<br><br>//查看是否安装成功，docker版本号<br>docker-compose --version<br>docker-compose version 1.23.2, build 1110ad01<br></code></pre></td></tr></table></figure><h3 id="Golang">Golang</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir /resource<br><span class="hljs-built_in">cd</span> /resource/<br>wget https://studygolang.com/dl/golang/go1.11.linux-amd64.tar.gz<br>tar xzvf go1.11.linux-amd64.tar.gz -C /usr/<span class="hljs-built_in">local</span><br></code></pre></td></tr></table></figure><p>配置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 这个目录用来存放go的一些源码（我理解为库函数）</span><br>mkdir /opt/gopath<br>vim /etc/profile<br><span class="hljs-comment"># 将下面代码粘贴进去（这里的GOPATH自己可以选一个自己想放的位置）</span><br><span class="hljs-built_in">export</span> GOROOT=/usr/<span class="hljs-built_in">local</span>/go<br><span class="hljs-built_in">export</span> GOPATH=/opt/gopath<br><span class="hljs-built_in">export</span> GOROOT=/usr/<span class="hljs-built_in">local</span>/go<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin<br><span class="hljs-comment"># 使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><span class="hljs-comment"># 查看是否配置成功</span><br>go env<br></code></pre></td></tr></table></figure><h3 id="Fabric安装">Fabric安装</h3><ol><li><p>将fabric-samples下载到<code>$GOPATH/src/github.com/hyperledger</code>目录中</p><p>网上很多教程都是fabirc 1.4.0版本的，但是现在从github上git下来的项目中是不存在first-network这个，需要将版本切换到1.4.0。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir -p <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger<br><span class="hljs-comment"># 首先安装git</span><br>yum -y install git<br><span class="hljs-comment"># 克隆fabric-samples项目并切换到v1.4tag</span><br><span class="hljs-comment">#这一步容易卡在一直处于建立连接中，ctrl+c断掉，重新再来。用虚拟机来搞环境的话，能不能下载下来全看运气了。如果用的云服务器，很容易git下来fabric-samples项目。</span><br>git <span class="hljs-built_in">clone</span> https://github.com/hyperledger/fabric-samples.git<br><span class="hljs-built_in">cd</span> fabric-samples<br>git checkout -b sample v1.4.0<br></code></pre></td></tr></table></figure><p>​以上操作完后，我们会在fabric-samples文件中看到一个first-network项目。</p><ol start="2"><li><p>Fabric相关的Docker镜像</p><p>这里的操作是为了避免网络原因导致Hyperledger Fabric二进制文件git不下来，下面的操作只进行docker相关的部分。之后我们会选择自己下载Hyperledger Fabric二进制等必须文件，避免在出现网络环境的情况下不知道自己到底哪部份没有成功git或者pull下来。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入fabric-samples中的script文件夹</span><br><span class="hljs-built_in">cd</span> /scripts<br><span class="hljs-comment"># 用#注释掉binaryDownload()函数以及binaryInstall命令，如下图所示。</span><br>vim bootstrap.sh<br><span class="hljs-comment"># 必须启动docker才能运行bootstrap.sh脚本，这里docker pull需要一定的时间，网络环境应该不会出现问题。</span><br>systemctl start docker<br>./bootstrap.sh<br></code></pre></td></tr></table></figure><img src="/2022/01/11/Hyperldeger-Fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220111230745152.png" class=""><img src="/2022/01/11/Hyperldeger-Fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220111231035328.png" class=""><h4 id="bootstrap-sh脚本运行失败解决方法">bootstrap.sh脚本运行失败解决方法</h4><ul><li><p>下载相关Docker镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载Fabric相关镜像（fabric-peer、fabric-orderer、fabric-ccenv、fabric-tools），此处以fabric-peer镜像为例，其他镜像同理</span><br>docker pull hyperledger/fabric-peer:1.4.0<br>docker tag hyperledger/fabric-peer:1.4.0 hyperledger/fabric-peer:latest<br><br><span class="hljs-comment"># 下载Fabric第三方镜像（fabric-couchdb、fabric-kafka、fabric-zookeeper），此处以fabric-couchdb为例，其他镜像同理</span><br>docker pull hyperledger/fabric-couchdb:0.4.14<br>docker tag hyperledger/fabric-couchdb:0.4.14 hyperledger/fabric-couchdb:latest<br><br><span class="hljs-comment"># 下载Fabric CA镜像</span><br>docker pull hyperledger/fabric-ca:1.4.0<br>docker tag hyperledger/fabric-ca:1.4.0 hyperledger/fabric-ca:latest<br></code></pre></td></tr></table></figure></li><li><p>（可选）镜像的备份与恢复（我没用过）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将上述Docker镜像存储到fabric-images文件中</span><br>docker save $(docker images | grep fabric | grep latest | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>) -o fabric-images<br><span class="hljs-comment"># 若需要多机部署，则通过下列命令将其分发到其他机器</span><br>scp fabric-images ubuntu@192.168.70.21:~<br><span class="hljs-comment"># 在192.168.70.21上加载上述镜像</span><br>docker load -o fabric-images<br></code></pre></td></tr></table></figure></li></ul><ol start="3"><li><p>下载Fabric二进制文件</p><p>这里的v1.4.0只是网上的一个大众选择，可以从官方github上找到最新的版本下载。同时，这里下载的Hyperledger Fabric二进制文件和CA证书会出现连接不到github的现象，这里可以多次运行一下的wget指令。（具体什么时候能连接上全看网络环境和运气orz）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /resource<br>wget https://github.com/hyperledger/fabric/releases/download/v1.4.0/hyperledger-fabric-linux-amd64-1.4.0.tar.gz<br><br><br>wget https://github.com/hyperledger/fabric-ca/releases/download/v1.4.0/hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz<br><br>tar xzvf hyperledger-fabric-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br>tar xzvf hyperledger-fabric-ca-linux-amd64-1.4.0.tar.gz -C <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/<br><br><span class="hljs-comment">#向/etc/profile中写入环境变量</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$GOROOT</span>/bin:<span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/bin<br><br><span class="hljs-comment">#使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></td></tr></table></figure></li></ol><h3 id="启动first-network样例">启动first-network样例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$GOPATH</span>/src/github.com/hyperledger/fabric-samples/first-network<br><span class="hljs-comment"># 编译通过Golang开发的chaincode并启动相关的容器</span><br>启动（过程比较长，可能需要几分钟）<br>./byfn.sh up   <br><br><span class="hljs-comment">#停止first-network网络中所有的容器，删除crypto材料和4个artifacts（genesis.block、mychannel.block、Org1MSPanchor.tx、Org2MSPanchor.tx）以及chaincode镜像</span><br>./byfn.sh down   <span class="hljs-comment">#请不要随便使用该命令</span><br></code></pre></td></tr></table></figure><p>​出现和如下图所示的语句，即证明环境搭建成功~</p><img src="/2022/01/11/Hyperldeger-Fabric%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/image-20220111234616111.png" class="">]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
